blueprint:
  name: Low battery level detection & notification for all battery sensors
  description: Regularly test all sensors with 'battery' device-class for crossing
    a certain battery level threshold and if so execute an action.
  domain: automation
  input:
    threshold:
      name: Battery warning level threshold
      description: Battery sensors below threshold are assumed to be low-battery (as
        well as binary battery sensors with value 'on').
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0
    time:
      name: Time to test on
      description: Test is run at configured time
      default: '10:00:00'
      selector:
        time: {}
    day:
      name: Weekday to test on
      description: 'Test is run at configured time either everyday (0) or on a given
        weekday (1: Monday ... 7: Sunday)'
      default: 0
      selector:
        number:
          min: 0.0
          max: 7.0
          mode: slider
          step: 1.0
    exclude:
      name: Excluded Sensors
      description: Battery sensors (e.g. smartphone) to exclude from detection. Only entities are supported.
      default: {entity_id: []}
      selector:
        target:
          entity:
            device_class: battery
    include:
      name: Included Sensors
      description: Battery sensors to explicitly include. If specified, only these sensors are checked.
      default: {entity_id: []}
      selector:
        target:
          entity:
            device_class: battery
    actions:
      name: Actions
      description: Notifications or similar to be run. {{sensors}} is replaced with
        the names of sensors being low on battery.
      selector:
        action: {}
  source_url: https://raw.githubusercontent.com/patapovich/homeassistant-misc/refs/heads/main/ow-battery-level-detection-notification-for-all-battery-sensors.yaml

variables:
  day: !input 'day'
  threshold: !input 'threshold'
  exclude: !input 'exclude'
  include: !input 'include'
  sensors: >-
    {% set result = namespace(sensors=[]) %}
    {% set battery_sensors = states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
    {% set binary_battery_sensors = states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') %}

    {% if include.entity_id %}
      {% set battery_sensors = battery_sensors | selectattr('entity_id', 'in', include.entity_id) %}
      {% set binary_battery_sensors = binary_battery_sensors | selectattr('entity_id', 'in', include.entity_id) %}
    {% endif %}

    {% for state in battery_sensors %}
      {% if 0 <= state.state | int(-1) < threshold | int and not state.entity_id in exclude.entity_id %}
        {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] %}
      {% endif %}
    {% endfor %}

    {% for state in binary_battery_sensors | selectattr('state', '==', 'on') %}
      {% if not state.entity_id in exclude.entity_id %}
        {% set result.sensors = result.sensors + [state.name] %}
      {% endif %}
    {% endfor %}

    {{ result.sensors | join(', ') }}

trigger:
- platform: time
  at: !input 'time'

condition:
- '{{ sensors != "" and (day | int == 0 or day | int == now().isoweekday()) }}'

action:
- choose: []
  default: !input 'actions'

mode: single
